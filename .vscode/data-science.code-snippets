{
	// Place your dl-playground workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	// https://www.youtube.com/watch?v=ZaH7nEzgX7o&t=352s
	// https://code.visualstudio.com/docs/editor/userdefinedsnippets
	"Create code block header": {
		"prefix": "cbh",
		"body": [
			"# -----------------------------------------------------------------------------",
			"# $1",
			"# -----------------------------------------------------------------------------",
		],
		"scope": "python",
	},
	"Data science libraries": {
		"prefix": "dsl",
		"body": [
			"import os",
			"import sys",
			"import re",
			"import time",
			"import datetime",
			"import random",
			"import warnings",
			"import itertools",
			"import collections",
			"import math",
			"import json",
			"import pickle",
			"import requests",
			"import shutil",
			"from io import BytesIO, StringIO",
			"import numpy as np",
			"import pandas as pd",
			"import geopandas as gpd",
			"import matplotlib as mpl",
			"import matplotlib.pyplot as plt",
			"import seaborn as sns",
			"from tqdm import tqdm",
			"from functools import reduce",
			"from PIL import Image",
			"import uuid",
			"import gc",
			"from cycler import cycler",
			"# from colorama import init, Fore, Back, Style",
			"# from missingpy import MissForest",
			"# import missingno as msno",
			"",
			"sns.set_style('whitegrid')",
			"",
			"pd.set_option('display.max_columns', None)",
			"pd.set_option('display.max_rows', 100)",
			"pd.set_option('display.max_colwidth', None)",
			"pd.set_option('display.width', None)",
			"pd.set_option('display.precision', 3)",
			"pd.options.display.float_format = lambda x : '{:,.2f}'.format(x) if (np.isnan(x) | np.isinf(x)) else '{:,.0f}'.format(x) if int(x) == x else '{:,.2f}'.format(x)"
			"",
			"colors = cycler(color=plt.get_cmap('tab10').colors)  # ['b', 'r', 'g']",
			"mpl.style.use('ggplot')",
			"mpl.rcParams['figure.figsize'] = (20, 5)",
			"mpl.rcParams['axes.facecolor'] = 'white'",
			"mpl.rcParams['axes.grid'] = True",
			"mpl.rcParams['grid.color'] = 'lightgray'",
			"mpl.rcParams['axes.prop_cycle'] = colors",
			"mpl.rcParams['axes.linewidth'] = 1",
			"mpl.rcParams['xtick.color'] = 'black'",
			"mpl.rcParams['ytick.color'] = 'black'",
			"mpl.rcParams['font.size'] = 12",
			"mpl.rcParams['figure.titlesize'] = 25",
			"mpl.rcParams['figure.dpi'] = 100",
			"",
			"warnings.filterwarnings('ignore')",
			"warnings.simplefilter('ignore')",
		],
		"scope": "python",
	},
	"Machine Learning algorithms": {
		"prefix": "mla",
		"body": [
			"# # ALGORITHMS",
			"import numpy as np",
			"import pandas as pd",
			"import matplotlib.pyplot as plt",
			"import seaborn as sns",
			"import random",
			"# import mlflow",
			"# from imblearn.over_sampling import SMOTE, ADASYN, RandomOverSampler",
			"# from imblearn.under_sampling import RandomUnderSampler, TomekLinks, NearMiss",
			"# from imblearn.ensemble import BalancedBaggingClassifier",
			"# from catboost import CatBoostClassifier, CatBoostRegressor, Pool, cv",
			"# from lightgbm import LGBMClassifier, LGBMRegressor",
			"# from xgboost import XGBClassifier, XGBRegressor",
			"# import pycaret",
			"# import shap",
			"# import eli5",
			"# import lime",
			"# import optuna",
			"# import hyperopt",
			"# import scipy",
			"# import statsmodels.api as sm",
			"# import statsmodels.formula.api as smf",
			"# import statsmodels.stats.api as sms",
			"",
			"# from sklearn.model_selection import train_test_split, GridSearchCV, StratifiedKFold, KFold, RepeatedStratifiedKFold, cross_val_score",
			"# from sklearn.metrics import f1_score, confusion_matrix, classification_report",
			"# from sklearn.clustering import KMeans",
			"# from sklearn.mixture import GaussianMixture",
			"# from sklearn.manifold import TSNE",
			"# from sklearn.decomposition import PCA",
			"# from sklearn.impute import KNNImputer	# MissRanger",
			"# from sklearn.tree import DecisionTreeClassifier, DecisionTreeRegressor, plot_tree",
			"# from sklearn.ensemble import IsolationForest",
			"# from sklearn.preprocessing import RobustScaler, StandardScaler, MinMaxScaler"
			"",
			"SEED = 42",
			"np.random.seed(SEED)",
			"random.seed(SEED)",
			"",
			"# Steps:",
			"# 1. Load data",
			"# 2. Prepare data",
			"# 	Feature engineering:"
			"# 		- Squares, logs, cubics, etc. for skewed data",
			"# 		- Ratios, variable interactions, daily variations, moving averages, EWMA, EMA, smoothing",
			"# 		- Binning (percentile, decile), frequency encoding, embedding, etc. for categorical data",
			"# 		- Outlier detection and removal",
			"# 		- Missing value imputation (mean, median, mode, KNN, MICE, etc.)",
			"# 		- Categorize the numerical data (binning, etc.)",
			"",
			"# 		- Feature selection (correlation, multicollinearity, PCA, etc.)",
			"# 		- Feature scaling (standardization, normalization, etc.)",
			"# 		- Feature encoding (one-hot, label, ordinal, etc.)",
			"# 		- Feature generation (polynomials, etc.)",
			"# 		- Feature extraction (PCA, LDA, etc.)",
			"# 		- Feature transformation (log, square, etc.)",
			"# 		- Oversampling/undersampling (SMOTE, etc.)",
			"# 3. Build a baseline model",
			"#  Classification",
			"# 		- Check class imbalance (class weights argument)",
			"# 		- Stratified K-fold cross-validation",
			"# 		- Threshold moving/tuning (punto de corte)",
			"# 		- Search optimal threshold in a grid",
			"# 		- Check classification report",
			"# 		- Check confusion matrix",
			"#  Regression",
			"# 		- Check distribution of target variable",
			"# 		- Check skewness of target variable",
			"# 		- Check outliers",
			"# 		- Check correlation with other variables",
			"# 		- Check distribution of features",
			"# 		- Check skewness of features",
			"# 		- Check Kaggle competition notebooks",
			"# 4. Build a model",
			"# 5. Compare models",
			"# 6. Tune hyperparameters",
			"# 7. Make predictions",
			"# 8. Save model",
			"# 9. Load model",
			"# 10. Interpret model",
			"# 		- Feature importance (permutation, SHAP, etc.)",
			"# 		- Partial dependence plots",
			"# 		- Individual conditional expectation plots",
			"# 		- LIME",
			"# 		- ELI5",
			"# 11. Deploy model/Submit predictions",
			"",
		],
		"scope": "python",
	},
	"PyTorch deep learning libraries": {
		"prefix": "pth",
		"body": [
			"import torch",
			"import torch.nn as nn",
			"import torch.nn.functional as F",
			"import torch.optim as optim",
			"from torch.utils.data import Dataset, DataLoader",
			"from torchvision import transforms, utils",
			"from torchinfo import summary",
			"import vector_quantize_pytorch as vq",
			"",
			"SEED = 42",
			"torch.manual_seed(SEED)",
			"torch.backends.cudnn.deterministic = True",
			"torch.backends.cudnn.benchmark = False",
			"",
			"device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
			"print('Device:', device)",
		],
		"scope": "python",
	},
	"Train/test split": {
		"prefix": "tts",
		"body": [
			"from sklearn.model_selection import train_test_split",
			"SEED = 42",
			"",
			"df = $1",
			"target = $2",
			"",
			"X = df.drop(target, axis=1)",
			"y = df[target]",
			"",
			"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=SEED)	# , stratify=y",
			""
		],
		"scope": "python",
	},
	"Statmodels Linear Regression": {
		"prefix": "smlr",
		"body": [
			"import statsmodels.api as sm",
			"import statsmodels.formula.api as smf",
			"import statsmodels.stats.api as sms",
			"import numpy as np",
			"from sklearn.metrics import r2_score, mean_absolute_error, mean_absolute_percentage_error, mean_squared_error"
			"$1",
			"X_train = sm.add_constant(X_train)",
			"X_test = sm.add_constant(X_test)",
			"model = sm.OLS(y_train, X_train).fit()",
			"print(model.summary())"
			"",
			"y_pred = model.predict(X_test)",
			"print('R2:', r2_score(y_test, y_pred))",
			"print('MAE:', mean_absolute_error(y_test, y_pred))",
			"print('MAPE:', mean_absolute_percentage_error(y_test, y_pred))",
			"print('MSE:', mean_squared_error(y_test, y_pred))",
			"print('RMSE:', np.sqrt(mean_squared_error(y_test, y_pred)))",
			"",
		],
		"scope": "python",
	},
	"Lightning template": {
		"prefix": "lightning",
		"body": [
			"import lightning as L",
			"L.seed_everything(42)",
		],
		"scope": "python",
	},
	"Webscraping template": {
		"prefix": "webscraping",
		"body": [
			"import requests",
			"from bs4 import BeautifulSoup",
			"import lxml	# etree",
			"import pandas as pd",
			"import numpy as np",
			"import re",
			"import time",
		],
		"scope": "python",
	}
}