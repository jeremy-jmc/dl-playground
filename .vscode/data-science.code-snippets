{
	// Place your dl-playground workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	// https://www.youtube.com/watch?v=ZaH7nEzgX7o&t=352s
	// https://code.visualstudio.com/docs/editor/userdefinedsnippets
	"Create code block header": {
		"prefix": "#",
		"body": [
			"# -----------------------------------------------------------------------------",
			"# $1",
			"# -----------------------------------------------------------------------------",
		],
		"scope": "python",
	},
	"Data science libraries": {
		"prefix": "dsl",
		"body": [
			"import os",
			"import sys",
			"import re",
			"import time",
			"import datetime",
			"import random",
			"import warnings",
			"import itertools",
			"import collections",
			"import math",
			"import json",
			"import pickle",
			"import requests",
			"import shutil",
			"from io import BytesIO, StringIO",
			"import numpy as np",
			"import pandas as pd",
			"import geopandas as gpd",
			"import matplotlib as mpl",
			"import matplotlib.pyplot as plt",
			"import seaborn as sns",
			"from tqdm import tqdm",
			"from PIL import Image",
			"import uuid",
			"import gc",
			"from cycler import cycler",
			"# import missingno as msno",
			"",
			"pd.set_option('display.max_columns', None)",
			"pd.set_option('display.max_rows', 100)",
			"pd.set_option('display.max_colwidth', None)",
			"pd.set_option('display.width', None)",
			"pd.set_option('display.precision', 3)",
			"pd.options.display.float_format = lambda x : '{:,.2f}'.format(x) if (np.isnan(x) | np.isinf(x)) else '{:,.0f}'.format(x) if int(x) == x else '{:,.2f}'.format(x)"
			"",
			"colors = cycler(color=plt.get_cmap('tab10').colors)  # ['b', 'r', 'g']",
			"mpl.style.use('ggplot')",
			"mpl.rcParams['figure.figsize'] = (20, 5)",
			"mpl.rcParams['axes.facecolor'] = 'white'",
			"mpl.rcParams['axes.grid'] = True",
			"mpl.rcParams['grid.color'] = 'lightgray'",
			"mpl.rcParams['axes.prop_cycle'] = colors",
			"mpl.rcParams['axes.linewidth'] = 1",
			"mpl.rcParams['xtick.color'] = 'black'",
			"mpl.rcParams['ytick.color'] = 'black'",
			"mpl.rcParams['font.size'] = 12",
			"mpl.rcParams['figure.titlesize'] = 25",
			"mpl.rcParams['figure.dpi'] = 100",
			"",
			"warnings.filterwarnings('ignore')",
			"warnings.simplefilter('ignore')",
		],
		"scope": "python",
	},
	"Machine Learning algorithms": {
		"prefix": "mla",
		"body": [
			"# # ALGORITHMS",
			"# from catboost import CatBoostClassifier, CatBoostRegressor, Pool, cv",
			"# from lightgbm import LGBMClassifier, LGBMRegressor",
			"# from xgboost import XGBClassifier, XGBRegressor",
			"# import pycaret",
			"# import shap",
			"# import optuna",
			"# import scipy",
			"# import statsmodels.api as sm",
			"# import statsmodels.formula.api as smf",
			"# import statsmodels.stats.api as sms",
			"",
			"# from sklearn.model_selection import train_test_split, GridSearchCV, StratifiedKFold, KFold, cross_val_score",
			"# from sklearn.metrics import f1_score, confusion_matrix, classification_report",
			"",
			"SEED = 42",
			"np.random.seed(SEED)",
			"random.seed(SEED)",
		],
		"scope": "python",
	},
	"PyTorch deep learning libraries": {
		"prefix": "pth",
		"body": [
			"import torch",
			"import torch.nn as nn",
			"import torch.nn.functional as F",
			"import torch.optim as optim",
			"from torch.utils.data import Dataset, DataLoader",
			"from torchvision import transforms, utils",
			"from torchinfo import summary",
			"",
			"SEED = 42",
			"torch.manual_seed(SEED)",
			"torch.backends.cudnn.deterministic = True",
			"torch.backends.cudnn.benchmark = False",
			"",
			"device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
			"print('Device:', device)",
		],
		"scope": "python",
	}
}